{% comment %}
  Shape Picker Snippet
  This snippet creates a shape picker using pills and displays relevant input fields based on the selected shape.
{% endcomment %}

{% assign shapes = 'Round,Rectangular' | split: ',' %}


{{product.var}}



<div class="option-block">
  <input type="hidden" id="selected-variant-id" value="" >
  <h5 class="picker-header">Shapes</h5>
  <div class="shape-picker">
    {% for shape in shapes %}
      {% assign is_disabled = false %}
      {% if shape == 'Round' %}
        {% assign is_checked = true %}
      {% elsif shape == 'Rectangular' %}
        {% assign is_checked = false %}
      {% endif %}
      <label class="shape-pill{% if is_disabled %} disabled{% endif %} {% if is_checked %}checked{% endif %}">
        <input
          type="radio"
          name="properties[Shape]"
          value="{{ shape }}"
          class="shape-input"
          {% if is_disabled %} disabled{% endif %}
          {% if is_checked %} checked{% endif %}
          form="{{product_form_id}}"
        >
        {% if shape == 'Round' %}
          {% render 'icon-round' %}
        {% elsif shape == 'Rectangular' %}
          {% render 'icon-rectangle' %}
        {% endif %}
        {{ shape }}
      </label>
    {% endfor %}
  </div>

  <div class="shape-details-container">
 
    <div id="RoundDetails" class="shape-details" style="display: block;">
      <label for="DiameterSelect" class="form-label">Diameter</label>
      <div class="flex-row">
        <div class="dimension-input">
          
          <select id="DiameterSelect" name="diameter" class="form-select">
          </select>
        </div>
        <div class="dimension-input">
          <select id="DiameterInchSelect" name="diameter-inch" class="form-select">
            {% for i in (0..11) %}
              <option value="{{ i }}">{{ i }} inch</option>
            {% endfor %}
          </select>
        </div>
      </div>
    </div>


 
    <div id="RectangularDetails" class="shape-details" style="display: none;">
      <label for="LengthSelect" class="form-label">Length</label>
      <div class="flex-row">
        <div class="dimension-input">
          <select id="LengthSelect" name="length" class="form-select">
          </select>
        </div>
        <div class="dimension-input">
          <select id="LengthInchSelect" name="length-inch" class="form-select">
            {% for i in (0..11) %}
              <option value="{{ i }}">{{ i }} inch</option>
            {% endfor %}
          </select>
        </div>
      </div>

      <label for="WidthSelect" class="form-label">Width</label>
      <div class="flex-row">
        <div class="dimension-input">
          <select id="WidthSelect" name="width" class="form-select">
          </select>
        </div>
        <div class="dimension-input">
          <select id="WidthInchSelect" name="width-inch" class="form-select">
            {% for i in (0..11) %}
              <option value="{{ i }}">{{ i }} inch</option>
            {% endfor %}
          </select>
        </div>
      </div>
    </div>

</div>
    <input type="hidden" name="properties[Length ft]" id="line-item-dimension-length-feet" form="{{product_form_id}}">
    <input type="hidden" name="properties[Length inch]" id="line-item-dimension-length-inch" form="{{product_form_id}}">
    <input type="hidden" name="properties[Width ft]" id="line-item-dimension-width-feet" form="{{product_form_id}}">
    <input type="hidden" name="properties[Width inch]" id="line-item-dimension-width-inch" form="{{product_form_id}}">
    <input type="hidden" name="properties[Diameter ft]" id="line-item-dimension-diameter-feet" form="{{product_form_id}}">
    <input type="hidden" name="properties[Diameter inch]" id="line-item-dimension-diameter-inch" form="{{product_form_id}}">
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    var variantMetafields = {};
    
    {% for variant in product.variants %}
      variantMetafields["{{ variant.id }}"] = {
        max_diameter: {{ variant.metafields.custom.max_diameter.value | default: '0.0' }},
        max_length: {{ variant.metafields.custom.max_length.value | default: '0.0' }},
        max_width: {{ variant.metafields.custom.max_width.value | default: '0.0' }}
      };
    {% endfor %}


    const pricePerUnit = parseFloat('{{ product.metafields.custom.price_per_unit | default: "10.0" }}');
    const unit = '{{ product.metafields.custom.dimension_unit | default: "ft" }}';

    const diameterSelect = document.getElementById('DiameterSelect');
    const diameterInchSelect = document.getElementById('DiameterInchSelect');
    const lengthSelect = document.getElementById('LengthSelect');
    const lengthInchSelect = document.getElementById('LengthInchSelect');
    const widthSelect = document.getElementById('WidthSelect');
    const widthInchSelect = document.getElementById('WidthInchSelect');
    const selectedVariantIdInput = document.getElementById('selected-variant-id');

    // Function to extract the 'variant' parameter from the URL
    function getVariantIdFromUrl() {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get('variant');
    }

    // Function to update the options in a select element
    function updateSelectOptions(selectElement, maxValue) {
      selectElement.innerHTML = '';
      if(maxValue == 0){
         let option = document.createElement('option');
        option.value = 0;
        option.textContent = `0 ${unit}`;
        selectElement.appendChild(option);
      }else{
      selectElement.innerHTML = '';
      for (let i = 1; i <= maxValue; i++) {
        let option = document.createElement('option');
        option.value = i;
        option.textContent = `${i} ${unit}`;
        selectElement.appendChild(option);
      }
  }
  }
    

    // Function to update shape details based on the selected variant
    function updateShapeDetails() {
      const selectedVariantId = selectedVariantIdInput.value;
      const selectedVariant = variantMetafields[selectedVariantId] || {};

        if(selectedVariant.max_diameter){
        diameterSelect.disabled = false;
        diameterInchSelect.disabled = false;  
        updateSelectOptions(diameterSelect, selectedVariant.max_diameter);
        }else {
        diameterSelect.disabled = true;
        diameterInchSelect.disabled = true; 
        updateSelectOptions(diameterSelect, 0);
        }
        if(selectedVariant.max_length){
        lengthSelect.disabled = false;
        lengthInchSelect.disabled = false;  
        updateSelectOptions(lengthSelect, selectedVariant.max_length)
        }else{
        lengthSelect.disabled = true;
        lengthInchSelect.disabled = true;  
        updateSelectOptions(lengthSelect, 0)
        }
        if(selectedVariant.max_width){
        widthSelect.disabled = false;
        widthInchSelect.disabled = false;   
        updateSelectOptions(widthSelect, selectedVariant.max_width)
        }else {
        widthSelect.disabled = true;
        widthInchSelect.disabled = true;  
          updateSelectOptions(widthSelect,0)
        };
      
    }

    // Set the selectedVariantId based on the URL or default to the first variant
    const variantIdFromUrl = getVariantIdFromUrl();
    if (variantIdFromUrl && variantMetafields[variantIdFromUrl]) {
      selectedVariantIdInput.value = variantIdFromUrl;
    } else {
      // Set to the first key in variantMetafields
      selectedVariantIdInput.value = Object.keys(variantMetafields)[0];
    }

    // Call updateShapeDetails to set the initial shape details
    updateShapeDetails();

    // Function to update price based on selected dimensions
    function updatePrice() {
      let area = 0;
      const shape = document.querySelector('input[name="properties[Shape]"]:checked')?.value;

      const diameterFeetLineItem = document.getElementById('line-item-dimension-diameter-feet');
      const diameterInchesLineItem = document.getElementById('line-item-dimension-diameter-inch');
      const lengthFeetLineItem = document.getElementById('line-item-dimension-length-feet');
      const lengthInchesLineItem = document.getElementById('line-item-dimension-length-inch');
      const widthFeetLineItem = document.getElementById('line-item-dimension-width-feet');
      const widthInchesLineItem = document.getElementById('line-item-dimension-width-inch');

      if (shape === 'Round') {
        const diameter = parseFloat(diameterSelect.value);
        const diameterInches = parseFloat(diameterInchSelect.value);

        diameterFeetLineItem.value = diameter > 0 ? diameter : null;
        diameterInchesLineItem.value = diameterInches > 0 ? diameterInches : null;
        lengthFeetLineItem.value = null;
        lengthInchesLineItem.value = null;
        widthFeetLineItem.value = null;
        widthInchesLineItem.value = null;

        const totalDiameter = diameter + diameterInches / 12;
        if (totalDiameter) {
          const radius = totalDiameter / 2;
          area = Math.PI * Math.pow(radius, 2);
        }

      } else if (shape === 'Rectangular') {
        const length = parseFloat(lengthSelect.value);
        const lengthInches = parseFloat(lengthInchSelect.value);
        const width = parseFloat(widthSelect.value);
        const widthInches = parseFloat(widthInchSelect.value);

        lengthFeetLineItem.value = length > 0 ? length : null;
        lengthInchesLineItem.value = lengthInches > 0 ? lengthInches : null;
        widthFeetLineItem.value = width > 0 ? width : null;
        widthInchesLineItem.value = widthInches > 0 ? widthInches : null;
        diameterFeetLineItem.value = null;
        diameterInchesLineItem.value = null;

        const totalLength = length + lengthInches / 12;
        const totalWidth = width + widthInches / 12;
        if (totalLength && totalWidth) {
          area = totalLength * totalWidth;
        }
      }

      const price = (area * pricePerUnit).toFixed(2);
      const priceItem = document.querySelector('.price-item');
      if (priceItem) {
        priceItem.textContent = `$${price} USD`;
      }
    }

    // Shape pill click handler
    document.querySelectorAll('.shape-pill').forEach(function (pill) {
      pill.addEventListener('click', function () {
        document.querySelectorAll('.shape-pill').forEach(function (p) {
          p.classList.remove('checked');
        });

        pill.classList.add('checked');
        document.querySelectorAll('.shape-details').forEach(function (detail) {
          detail.style.display = 'none';
        });

        if (pill.querySelector('input').value === 'Round') {
          document.getElementById('RoundDetails').style.display = 'block';
        } else if (pill.querySelector('input').value === 'Rectangular') {
          document.getElementById('RectangularDetails').style.display = 'block';
        }

        updatePrice();
      });
    });

    // Listen for changes in the dimension inputs to update the price
    document.querySelectorAll('#DiameterSelect, #DiameterInchSelect, #LengthSelect, #LengthInchSelect, #WidthSelect, #WidthInchSelect').forEach((input) => {
      input.addEventListener('change', updatePrice);
    });

    // Listen for changes in the variant selection
    selectedVariantIdInput.addEventListener('change', updateShapeDetails);
  });
</script>



<style>
  .option-block {
    border: 1px solid #ccc;
    padding: 15px 20px;
    border-radius: 3px;
  }
  .option-block h5 {
    margin-bottom: 15px;
    font-weight: bold;
  }
  .shape-picker {
    display: flex;
    gap: 0.5rem;
  }
  .shape-pill {
    display: flex;
    align-items: center;
    padding: 5px 15px;
    border: 1px solid #ccc;
    border-radius: 18px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    font-size: 1.2rem;
    font-weight: bold;
    gap:0.8rem;
  }
  .shape-pill.checked {
    background-color: #000;
    color: #fff;
    border-color: #000;
  }
  .shape-pill.disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }

  .shape-input {
    display: none;
  }

  .shape-details {
  margin-top: 15px;
}

.flex-row {
  display: flex;
  gap: 10px;
  margin-bottom: 10px;
}

.dimension-input {
  display: flex;
  flex-direction: column;
}

.form-label {
  font-weight: bold;
  margin-bottom: 5px;
  display: block;
}

.form-label-sm {
  font-size: 1.1rem;
  font-weight: normal;
  margin-bottom: 3px;
  text-align: center;
}

.form-select {
  padding: 5px;
  border: 1px solid #ccc;
  border-radius: 5px;
  flex: 1;
}

.picker-header{
  
}


</style>
